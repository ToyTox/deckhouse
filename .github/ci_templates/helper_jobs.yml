{!{ define "git_info_job" }!}
# <template: git_info_job>
git_info:
  name: Get git info
  runs-on: ubuntu-latest
  outputs:
    ci_commit_tag: ${{ steps.git_info.outputs.ci_commit_tag }}
    ci_commit_branch: ${{ steps.git_info.outputs.ci_commit_branch }}
    ci_commit_ref_name: ${{ steps.git_info.outputs.ci_commit_ref_name }}
    ci_pipeline_created_at: ${{ steps.git_info.outputs.ci_pipeline_created_at }}
    github_sha: ${{ steps.git_info.outputs.github_sha }}
  steps:
    - id: git_info
      name: Get tag name and SHA
      uses: {!{ index (ds "actions") "actions/github-script" }!}
      with:
        script: |
          // Refer to:
          //   - https://docs.github.com/en/actions/learn-github-actions/environment-variables
          //   - https://github.com/actions/toolkit/blob/main/packages/github/src/context.ts

          const { GITHUB_REF_TYPE, GITHUB_REF_NAME } = process.env

          core.setOutput(`ci_commit_tag`,    GITHUB_REF_TYPE == "tag"    ? GITHUB_REF_NAME : "")
          core.setOutput(`ci_commit_branch`, GITHUB_REF_TYPE == "branch" ? GITHUB_REF_NAME : "")

          // TODO delete `ci_pipeline_created_at` everywhere in CI since it is useless.
          // 2021-12-15T11:10:45.138Z   (not 2021-12-15T11:10:45+00:00)
          core.setOutput('ci_pipeline_created_at', new Date().toISOString())

          if (context.eventName === "workflow_dispatch") {
            core.setOutput('ci_commit_ref_name', context.payload.inputs.ci_commit_ref_name)
          } else {
            // If PRs from forks, we assign images with `prXXX` tags to avoid clashes with inner branches.

            const sourceRepo = context.payload.pull_request.head.repo.full_name
            const ourRepo = context.payload.repository.full_name
            const refName = (sourceRepo === ourRepo) ? GITHUB_REF_NAME : `pr${context.issue.number}`

            core.setOutput('ci_commit_ref_name', refName)
          }

          core.setOutput('github_sha', context.payload.sha)

# </template: git_info_job>
{!{- end -}!}


{!{ define "restore_images_tags_json_template" }!}
# <template: restore_images_tags_json_template>
images_tags_json:
  name: Put images_tags_json into artifact
  runs-on: ubuntu-latest

  steps:
    - name: Restore from cache
      id: images-tags-json
      uses: actions/cache@v2
      with:
        path: modules/images_tags_${{env.WERF_ENV}}.json
        key: ${{ github.sha }}-images-tags

    - name: Fail if not found
      if: steps.cache-primes.outputs.cache-hit != 'true'
      run: |
        echo images_tags json file not found in cache: restart build modules job.
        exit 1

{!{ tmpl.Exec "save_images_tags_json_step" . | strings.Indent 4 }!}
# </template: restore_images_tags_json_template>
{!{- end -}!}


# Only useful with pull_request_target.
#
# Checks out merge commit, checks for dangerous changes, and if none found, returns the ref.
{!{ define "pull_request_info_job" }!}
# <template: pull_request_info>
pull_request_info:
  name: Get pull request reference
  runs-on: ubuntu-latest
  outputs:
    ref: ${{ steps.ref.outputs.ref }}
  steps:
    # Checkhout the merge commit
    - name: Checkout PR merge commit
      uses: {!{ index (ds "actions") "actions/checkout" }!}
      with:
        ref: "refs/pull/${{ github.event.number }}/merge"

    # Detect forbidden changes in external PR
    - name: Check for forbidden changes
      if: github.event.pull_request.head.repo.full_name != github.repository
      uses: {!{ index (ds "actions") "technote-space/get-diff-action" }!}
      with:
        PATTERNS: |
          ./.github/**
          ./.gitlab/**
          ./tools/**
          ./testing/**
          ./docs/**/js/**
          ./docs/**/css/**
          ./docs/**/images/**
          ./docs/**/assets/**

    # Stop workflow if external PR contains forbidden changes
    - name: Verify allowed changes in external PR
      if: github.event.pull_request.head.repo.full_name != github.repository && env.GIT_DIFF_FILTERED
      uses: {!{ index (ds "actions") "actions/github-script" }!}
      with:
        script: |
            core.setFailed('External PR contains forbidden changes.')

    # Set output
    - name: Return PR merge commit ref
      id: ref
      uses: {!{ index (ds "actions") "actions/github-script" }!}
      with:
        script: |
          core.setOutput('ref', `refs/pull/${ context.issue.number }/merge`)
# </template: pull_request_info>
{!{- end -}!}
